#!/bin/bash
# Repo: https://github.com/mdwajid095/ns

# Define some colors for better visibility
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)
NC=$(tput sgr0)  # No Color

[[ -n $DEBUG ]] && set -x
set -eou pipefail

# Function to show help
show_help() {
  local SELF="ns"
  #local SELF_CMD="$0"
  if [[ "$(basename "$0")" == kubectl-* ]]; then # invoked as plugin
    SELF="kubectl ns"
  fi
  cat <<EOF
        ns: A dynamic Bash script enabling seamless navigation across Kubernetes namespaces and clusters interactively.
        USAGE:
           $SELF                    : Set namespace across multiple cluster
           $SELF <NAME>             : Set namespace within cluster
           $SELF -c,--current       : Show current namespace
	   $SELF -a,--all           : List all namespaces
	   $SELF -x,--history       : Show the history of namespaces changed
	   $SELF -,-b,--back,.      : Switch back to the previous namespace
           $SELF -h,--help          : Show help

EOF
}

# Function to list clusters
list_clusters() {
    echo -e "${GREEN}Clusters in VM $(hostname -i):${NC}"
    kubectl config get-contexts -o name | cat -n
}

# Function to list namespaces
list_namespaces() {
    local cluster=$1

    if [ "${cluster}" == "-a" ] || [ "${cluster}" == "--all" ]; then
        cluster=$(kubectl config current-context)
    fi

    kubectl config use-context "${cluster}"
    echo -e "${BLUE}Namespaces in ${cluster}:${NC}"
    kubectl get namespaces -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | cat -n
    echo
}

# Function to set namespace across multiple cluster
set_namespace() {
    local cluster=$1
    local namespace=$2

    kubectl config use-context "${cluster}"
    if ! kubectl get namespace "${namespace}" > /dev/null 2>&1; then
        echo -e "${RED}Provided namespace does not exist in the cluster '${cluster}'${NC}"
		print_instruction
        return 1
    fi
    kubectl config set-context --current --namespace="${namespace}"

    echo -e "${GREEN}Namespace has been set to '${namespace}' in ${cluster}${NC}"
    echo "${cluster}:${namespace}" >> ~/.namespace_history && tail -n 10 ~/.namespace_history > temp_file && mv temp_file ~/.namespace_history
}

# Function to set namespace within cluster
set_ns() {
    local namespace=$1
    local cluster

    if kubectl get namespace "${namespace}" > /dev/null 2>&1; then
        kubectl config set-context --current --namespace="${namespace}"
        echo -e "${GREEN}Namespace has been set to '${namespace}'${NC}"
    else
        echo -e "${RED}No such namespace '${namespace}' in this cluster${NC}"
        print_instruction
    fi
	cluster=$(kubectl config current-context)
	echo "${cluster}:${namespace}" >> ~/.namespace_history && tail -n 10 ~/.namespace_history > temp_file && mv temp_file ~/.namespace_history
}

# Function to show current namespace
show_current_namespace() {
    current_ns=$(kubectl config view --minify --output 'jsonpath={..namespace}')
    echo -e "${GREEN}Current namespace is ${current_ns} ${NC}"
}

# Function to switch back to previous ns
switch_back() {
    local last_namespace
    last_namespace=$(tail -n 2 ~/.namespace_history | head -n 1)
    local cluster=${last_namespace%:*}
    local namespace=${last_namespace#*:}

    set_namespace "${cluster}" "${namespace}"
}

show_namespace_history() {
    echo -e "${CYAN}Cluster Name\t\tNamespace${NC}"
    awk -F: '{print $1 "\t" $2}' ~/.namespace_history
}

print_instruction(){
    echo -e "${YELLOW}Execute for help: ns -h ${NC}"
}

# Check if the input is a number
if_number(){
  if ! [[ $1 =~ ^[0-9]+$ ]]; then
    echo -e "${RED}Error: Input must be a number${NC}"
    print_instruction
    exit 1
  fi
}

# Main script
main() {

if [[ -z "${KUBECTL:-}" ]]; then
  if hash kubectl 2>/dev/null; then
    KUBECTL=kubectl
  elif hash kubectl.exe  2>/dev/null; then
    KUBECTL=kubectl.exe
  else
    echo >&2 "kubectl is not installed"
    exit 1
  fi
fi

if (( "$#" > 1 )); then
  echo -e "${RED}Error: More than one flag provided${NC}" >&2
  print_instruction
  exit 1
fi

while (( "$#" )); do
  case "$1" in
    -c|--current)
      show_current_namespace
      exit 1
      ;;
    -a|--all)
      list_namespaces "$1"
      exit 1
      ;;
    -|-b|--back|.)
      switch_back
      exit 1
      ;;
    -x|--history)
      show_namespace_history
      exit 1
      ;;
    -h|--help)
      show_help
      exit 1
      ;;
    -*|.*) # unsupported flags
      echo -e "${RED}Error: Unsupported flag $1 ${NC}" >&2
      print_instruction
      exit 1
      ;;
        *)
      set_ns "$1"
      exit 1
      ;;
  esac
done

if (( "$#" == 0 )); then
  list_clusters
  read -rp "${CYAN}Enter the number of the cluster to be set: ${NC}" cluster_number
  cluster_number=${cluster_number:-1}
  if_number "${cluster_number}"
  cluster=$(kubectl config get-contexts -o name | sed -n "${cluster_number}p")

  list_namespaces "${cluster}"
  read -rp "${CYAN}Enter the number of the namespace to be set: ${NC}" namespace_number
  namespace_number=${namespace_number:-1}
  if_number "${namespace_number}"
  namespace=$(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}' | tr ' ' '\n' | sed -n "${namespace_number}p")

  set_namespace "${cluster}" "${namespace}"
fi
}

main "$@"
